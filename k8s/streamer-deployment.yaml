apiVersion: apps/v1
kind: Deployment
metadata:
  name: streamer
  namespace: geo-sharding
  labels:
    app: streamer
    component: event-processor
spec:
  replicas: 5
  selector:
    matchLabels:
      app: streamer
  template:
    metadata:
      labels:
        app: streamer
        component: event-processor
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: streamer
        image: geo-sharding/streamer:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9090
          name: metrics
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: geo-sharding-config
              key: KAFKA_BROKERS
        - name: REDIS_ADDR
          valueFrom:
            configMapKeyRef:
              name: geo-sharding-config
              key: REDIS_ADDR
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: geo-sharding-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: geo-sharding-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: geo-sharding-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: geo-sharding-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: geo-sharding-secrets
              key: POSTGRES_PASSWORD
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: geo-sharding-config
              key: LOG_LEVEL
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 9090
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: streamer-service
  namespace: geo-sharding
  labels:
    app: streamer
spec:
  selector:
    app: streamer
  ports:
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: streamer-hpa
  namespace: geo-sharding
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: streamer
  minReplicas: 5
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: kafka_consumer_lag_per_pod
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 200
        periodSeconds: 15
      - type: Pods
        value: 10
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 180
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
